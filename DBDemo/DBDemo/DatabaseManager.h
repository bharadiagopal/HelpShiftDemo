#import <Foundation/Foundation.h>
#import<sqlite3.h>

@interface DatabaseManager : NSObject
{
    sqlite3*            _db;
    
    NSDateFormatter     *_dateFormat;
}

+ (DatabaseManager *) sharedDatabaseManager;

typedef void (^completionBlock)(id row, NSError *error, BOOL finished);

// Declaration of DataBase Creation and Database Path Location fetching Methods
-(NSString *) dataFilePath;
+(void) checkAndCreateDatabase;
-(BOOL)executeQuery:(NSString *)query;
-(void)executeQuery:(NSString *)sql withArgumentsInArray:(NSArray *)arguments;
-(void)executeQuery:(NSString *)sql withParameterDictionary:(NSDictionary *)arguments;

- (BOOL)executeUpdate:(NSString*)sql withArgumentsInArray:(NSArray *)arguments;
- (BOOL)executeUpdate:(NSString*)sql withParameterDictionary:(NSDictionary *)arguments;

-(id)retriveQuery:(NSString *)query isDictionary:(BOOL)isDict;
-(id)retriveQuery:(NSString *)query withArgumentsInArray:(NSArray*)arrayArgs orDictionary:(NSDictionary *)dictionaryArgs;

- (id)objectForColumnIndex:(int)columnIdx inStatement:(sqlite3_stmt*)pStmt;
- (long long int)longLongIntForColumnIndex:(int)columnIdx inStatement:(sqlite3_stmt*)pStmt;
- (double)doubleForColumnIndex:(int)columnIdx inStatement:(sqlite3_stmt*)pStmt;
- (NSData*)dataForColumnIndex:(int)columnIdx inStatement:(sqlite3_stmt*)pStmt;
- (NSString*)stringForColumnIndex:(int)columnIdx inStatement:(sqlite3_stmt*)pStmt;


///---------------------
/// @name Date formatter
///---------------------

/** Generate an `NSDateFormatter` that won't be broken by permutations of timezones or locales.
 Use this method to generate values to set the dateFormat property.
 
 Example:
 myDB.dateFormat = [FMDatabase storeableDateFormat:@"yyyy-MM-dd HH:mm:ss"];
 
 @param format A valid NSDateFormatter format string.
 @return A `NSDateFormatter` that can be used for converting dates to strings and vice versa.
 @warning Note that `NSDateFormatter` is not thread-safe, so the formatter generated by this method should be assigned to only one FMDB instance and should not be used for other purposes.
 */
+ (NSDateFormatter *)storeableDateFormat:(NSString *)format;

/** Test whether the database has a date formatter assigned.
 @return `YES` if there is a date formatter; `NO` if not.
 */
- (BOOL)hasDateFormatter;

/** Set to a date formatter to use string dates with sqlite instead of the default UNIX timestamps.
 @param format Set to nil to use UNIX timestamps. Defaults to nil. Should be set using a formatter generated using FMDatabase::storeableDateFormat.
 @warning Note there is no direct getter for the `NSDateFormatter`, and you should not use the formatter you pass to FMDB for other purposes, as `NSDateFormatter` is not thread-safe.
 */
- (void)setDateFormat:(NSDateFormatter *)format;

/** Convert the supplied NSString to NSDate, using the current database formatter.
 @param s `NSString` to convert to `NSDate`.
 @return The `NSDate` object; or `nil` if no formatter is set.
 */
- (NSDate *)dateFromString:(NSString *)s;

/** Convert the supplied NSDate to NSString, using the current database formatter.
 @param date `NSDate` of date to convert to `NSString`.
 @return The `NSString` representation of the date; `nil` if no formatter is set.
 */
- (NSString *)stringFromDate:(NSDate *)date;


///-----------------------------
/// @name Retrieving error codes
///-----------------------------

/** Last error message
 Returns the English-language text that describes the most recent failed SQLite API call associated with a database connection. If a prior API call failed but the most recent API call succeeded, this return value is undefined.
 @return `NSString` of the last error message.
 @see [sqlite3_errmsg()](http://sqlite.org/c3ref/errcode.html)
 @see lastErrorCode
 @see lastError
 */
- (NSString*)lastErrorMessage;

/** Last error code
 Returns the numeric result code or extended result code for the most recent failed SQLite API call associated with a database connection. If a prior API call failed but the most recent API call succeeded, this return value is undefined.
 @return Integer value of the last error code.
 @see [sqlite3_errcode()](http://sqlite.org/c3ref/errcode.html)
 @see lastErrorMessage
 @see lastError
 */
- (int)lastErrorCode;

/** Had error
 @return `YES` if there was an error, `NO` if no error.
 @see lastError
 @see lastErrorCode
 @see lastErrorMessage
 */
- (BOOL)hadError;

/** Last error
 @return `NSError` representing the last error.
 @see lastErrorCode
 @see lastErrorMessage
 */
- (NSError*)lastError;

@end
